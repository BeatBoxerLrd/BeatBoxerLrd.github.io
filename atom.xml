<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>瑞雪$东飞</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-04T10:52:59.433Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Liu Ruidong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>IDEA创建多module继承项目</title>
    <link href="http://yoursite.com/2018/04/04/IDEA%E5%88%9B%E5%BB%BA%E5%A4%9Amodule%E7%BB%A7%E6%89%BF%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2018/04/04/IDEA创建多module继承项目/</id>
    <published>2018-04-04T10:51:07.000Z</published>
    <updated>2018-04-04T10:52:59.433Z</updated>
    
    <content type="html"><![CDATA[<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><a href="https://blog.csdn.net/williamhappy/article/details/54376855" target="_blank" rel="noopener">https://blog.csdn.net/williamhappy/article/details/54376855</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;链接&quot;&gt;&lt;a href=&quot;#链接&quot; class=&quot;headerlink&quot; title=&quot;链接&quot;&gt;&lt;/a&gt;链接&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/williamhappy/article/details/54376855&quot; 
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="IDEA使用" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/IDEA%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="多module" scheme="http://yoursite.com/tags/%E5%A4%9Amodule/"/>
    
  </entry>
  
  <entry>
    <title>Bloom Filter</title>
    <link href="http://yoursite.com/2018/03/31/Bloom-Filter/"/>
    <id>http://yoursite.com/2018/03/31/Bloom-Filter/</id>
    <published>2018-03-31T08:59:22.000Z</published>
    <updated>2018-03-31T09:16:31.639Z</updated>
    
    <content type="html"><![CDATA[<p>adjljkjk</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;adjljkjk&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>hexo发布博客</title>
    <link href="http://yoursite.com/2018/03/31/hexo%E5%8F%91%E5%B8%83%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2018/03/31/hexo发布博客/</id>
    <published>2018-03-31T06:32:53.000Z</published>
    <updated>2018-03-31T06:37:21.284Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建</span><br><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开启服务，本地调试</span><br><span class="line">$ hexo server  </span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate 生成  </span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d 部署</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">部署加生成</span><br><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo部署" scheme="http://yoursite.com/tags/hexo%E9%83%A8%E7%BD%B2/"/>
    
  </entry>
  
  <entry>
    <title>hexo添加tags和categries</title>
    <link href="http://yoursite.com/2018/03/31/hexo%E6%B7%BB%E5%8A%A0tags%E5%92%8Ccatelogies/"/>
    <id>http://yoursite.com/2018/03/31/hexo添加tags和catelogies/</id>
    <published>2018-03-31T06:16:42.000Z</published>
    <updated>2018-03-31T06:32:18.183Z</updated>
    
    <content type="html"><![CDATA[<h2 id="hexo的Next创建tags和categories"><a href="#hexo的Next创建tags和categories" class="headerlink" title="hexo的Next创建tags和categories"></a>hexo的Next创建tags和categories</h2><h3 id="一、tags-创建步骤"><a href="#一、tags-创建步骤" class="headerlink" title="一、tags 创建步骤"></a>一、tags 创建步骤</h3><h4 id="1、新建一个页面，命名为tags。命令如下："><a href="#1、新建一个页面，命名为tags。命令如下：" class="headerlink" title="1、新建一个页面，命名为tags。命令如下："></a>1、新建一个页面，命名为tags。命令如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br></pre></td></tr></table></figure><p>在myBlog/source下会新生成一个新的文件夹tags<br>，在该文件夹下会有一个index.md文件    </p><h4 id="2、编辑tags文件夹下的index-md"><a href="#2、编辑tags文件夹下的index-md" class="headerlink" title="2、编辑tags文件夹下的index.md"></a>2、编辑tags文件夹下的index.md</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: tags  </span><br><span class="line">date: 2017-07-10 16:36:26  </span><br><span class="line">type: &quot;tags&quot;</span><br></pre></td></tr></table></figure><h3 id="一、categolies-创建步骤"><a href="#一、categolies-创建步骤" class="headerlink" title="一、categolies 创建步骤"></a>一、categolies 创建步骤</h3><h4 id="1、新建一个页面，命名为categories。命令如下："><a href="#1、新建一个页面，命名为categories。命令如下：" class="headerlink" title="1、新建一个页面，命名为categories。命令如下："></a>1、新建一个页面，命名为categories。命令如下：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><p>在myBlog/source下会新生成一个新的文件夹categories<br>，在该文件夹下会有一个index.md文件    </p><h4 id="2、编辑tags文件夹下的index-md-1"><a href="#2、编辑tags文件夹下的index-md-1" class="headerlink" title="2、编辑tags文件夹下的index.md"></a>2、编辑tags文件夹下的index.md</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: categories  </span><br><span class="line">date: 2017-07-10 16:36:26  </span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><h3 id="三、在菜单中添加链接。编辑主题的-themes-next-config-yml-，添加tags到menu中，如下"><a href="#三、在菜单中添加链接。编辑主题的-themes-next-config-yml-，添加tags到menu中，如下" class="headerlink" title="三、在菜单中添加链接。编辑主题的 themes/next/_config.yml ，添加tags到menu中，如下:"></a>三、在菜单中添加链接。编辑主题的 themes/next/_config.yml ，添加tags到menu中，如下:</h3><p>menu:<br>home: /<br>archives: /archives/<br>categories: /categories/<br>tags: /tags/</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;hexo的Next创建tags和categories&quot;&gt;&lt;a href=&quot;#hexo的Next创建tags和categories&quot; class=&quot;headerlink&quot; title=&quot;hexo的Next创建tags和categories&quot;&gt;&lt;/a&gt;hexo的Nex
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo添加tags和categories" scheme="http://yoursite.com/tags/hexo%E6%B7%BB%E5%8A%A0tags%E5%92%8Ccategories/"/>
    
  </entry>
  
  <entry>
    <title>hexo搭建博客教程</title>
    <link href="http://yoursite.com/2018/03/31/hexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%95%99%E7%A8%8B/"/>
    <id>http://yoursite.com/2018/03/31/hexo搭建博客教程/</id>
    <published>2018-03-31T06:06:47.000Z</published>
    <updated>2018-03-31T06:12:12.453Z</updated>
    
    <content type="html"><![CDATA[<p>链接：<br><a href="https://blog.csdn.net/gdutxiaoxu/article/details/53576018" target="_blank" rel="noopener">https://blog.csdn.net/gdutxiaoxu/article/details/53576018</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链接：&lt;br&gt;&lt;a href=&quot;https://blog.csdn.net/gdutxiaoxu/article/details/53576018&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/gdutxiaox
      
    
    </summary>
    
      <category term="教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/"/>
    
      <category term="hexo教程" scheme="http://yoursite.com/categories/%E6%95%99%E7%A8%8B/hexo%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="hexo教程" scheme="http://yoursite.com/tags/hexo%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>spring源码IDEA的导入</title>
    <link href="http://yoursite.com/2018/03/29/spring%E6%BA%90%E7%A0%81IDEA%E7%9A%84%E5%AF%BC%E5%85%A5/"/>
    <id>http://yoursite.com/2018/03/29/spring源码IDEA的导入/</id>
    <published>2018-03-28T17:53:41.000Z</published>
    <updated>2018-03-31T06:38:57.142Z</updated>
    
    <content type="html"><![CDATA[<h3 id="第一步："><a href="#第一步：" class="headerlink" title="第一步："></a>第一步：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">下载源码;  </span><br><span class="line">git clone   git@github.com:spring-projects/spring-framework.git</span><br></pre></td></tr></table></figure><h3 id="第二步，下载配置gradle"><a href="#第二步，下载配置gradle" class="headerlink" title="第二步，下载配置gradle"></a>第二步，下载配置gradle</h3><p>下载网址 <a href="https://gradle.org/install/" target="_blank" rel="noopener">https://gradle.org/install/</a><br>配置：<br>1、创建系统环境变量：GRADLE_HOME gradle指定目录<br>2、path：%GRADLE_HOME%\bin<br>3、配置好了后打开cmd，输入gradle -v看是否成功  </p><h3 id="第三步：IDEA中导入"><a href="#第三步：IDEA中导入" class="headerlink" title="第三步：IDEA中导入"></a>第三步：IDEA中导入</h3><p><a href="https://blog.csdn.net/MOTUI/article/details/52810967" target="_blank" rel="noopener">https://blog.csdn.net/MOTUI/article/details/52810967</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;第一步：&quot;&gt;&lt;a href=&quot;#第一步：&quot; class=&quot;headerlink&quot; title=&quot;第一步：&quot;&gt;&lt;/a&gt;第一步：&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="Spring源码导入" scheme="http://yoursite.com/tags/Spring%E6%BA%90%E7%A0%81%E5%AF%BC%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>SpringIOC面试</title>
    <link href="http://yoursite.com/2018/03/22/SpringIOC%E9%9D%A2%E8%AF%95/"/>
    <id>http://yoursite.com/2018/03/22/SpringIOC面试/</id>
    <published>2018-03-22T10:29:51.000Z</published>
    <updated>2018-03-31T05:50:56.464Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-IOC和DI"><a href="#Spring-IOC和DI" class="headerlink" title="Spring IOC和DI"></a>Spring IOC和DI</h1><p><code>比如说我的类A要使用B的方法，就需要把B类作为自己的属性这样耦合度过高，现在只需要将这些对象的创建与销毁交给spring容器来操作，对其进行管理.</code></p><h3 id="常见的IOC的容器："><a href="#常见的IOC的容器：" class="headerlink" title="常见的IOC的容器："></a>常见的IOC的容器：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory 和 ApplicationContext</span><br><span class="line"></span><br><span class="line">BeanFactory规范，是一个简单的容器定义了Bean常用的方法getBean,getType,getAlise</span><br><span class="line">经常DefaultListableBeanFactory,底下有经常用的xmlBeanDefinition,主要可以读取以xml形式定义的BeanDefinition,beanDefinition是SpringIOC容器中的一种数据类型。</span><br><span class="line">`</span><br></pre></td></tr></table></figure><h3 id="BeanFactory与FactoryBean"><a href="#BeanFactory与FactoryBean" class="headerlink" title="BeanFactory与FactoryBean"></a>BeanFactory与FactoryBean</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory是一个bean工厂，而FactoryBean是一个工厂bean，可以用&amp;FactoryBean获取FactoryBean对象。</span><br></pre></td></tr></table></figure><h3 id="BeanDefinition"><a href="#BeanDefinition" class="headerlink" title="BeanDefinition"></a>BeanDefinition</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BeanDefinition:是对依赖反转模式中管理的对象依赖关系的数据抽象，BeanDifinition就是Spring IOC可以识别的容器</span><br></pre></td></tr></table></figure><h3 id="默认的一个容器DefaultListableBeanFactory"><a href="#默认的一个容器DefaultListableBeanFactory" class="headerlink" title="默认的一个容器DefaultListableBeanFactory"></a>默认的一个容器DefaultListableBeanFactory</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">BeanFactory&lt;----DefaultListableBeanFactory&lt;----XmlBeanFactory</span><br><span class="line">XmlBeanFactory：可以读取以Xml格式定义的BeanDefinition.</span><br></pre></td></tr></table></figure><h3 id="XmlBeanFactory的编程式实现"><a href="#XmlBeanFactory的编程式实现" class="headerlink" title="XmlBeanFactory的编程式实现"></a>XmlBeanFactory的编程式实现</h3><hr><p>1.资源的定位:<br>ClassPathResource res = new ClassPathResource();<br>2.创建BeanFactory<br>BeanFactory factory = new DefaultListaleBeanFactory();<br>3.创建一个加载类，读取配置文件并注入到BeanFactroy容器.<br>Reader reader = new XmlBeanDifinitionReader(factory);<br>4.加载资源文件将文件转换为BeanDifinition格式<br>reader.loadBeanDifinition(res);<br>此时会调用getResourceByPath();</p><hr><h3 id="另一个高级容易ApplictionContext"><a href="#另一个高级容易ApplictionContext" class="headerlink" title="另一个高级容易ApplictionContext"></a>另一个高级容易ApplictionContext</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">间接的实现了BeanFactory接口,同时也集成了MessageResource这个接口(支持国际化)，集成了DefaultResourceReader(可以直接访问各种资源)，继承了ApplicationEventPublisher(可以进行事件机制和Bean的生命周期管理)</span><br></pre></td></tr></table></figure><h2 id="IOC容器的初始化过程"><a href="#IOC容器的初始化过程" class="headerlink" title="IOC容器的初始化过程"></a>IOC容器的初始化过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.Resource资源的定位过程  </span><br><span class="line">2.载入和解析BeanDefinition  </span><br><span class="line">3.注册到IOC容器当中去   </span><br><span class="line">其实注册过程是将一个BeanDefinition注册到hashMap当中去</span><br></pre></td></tr></table></figure><h4 id="Resource资源的定位过程"><a href="#Resource资源的定位过程" class="headerlink" title="Resource资源的定位过程"></a>Resource资源的定位过程</h4><p>FileSystemResource，ClassPathResource<br>ApplicationContext<br>AbstractXmlApplicationContext&lt;———FileSystemXmlApplicationContext<br>ApplicationContext context = new FileSystemApplicationContext(“bean.xml”);<br>1.此过程首先会去调用refresh启动方法<br>2.此时会调用其几类中的refreshBeanFactory方法，此方法首先会判断有没有BeanFactory容器，有的话首先会将其销毁并关闭；没有的话会去的调用createBeanFactroy方法，此时其实创建的是一个DefaultListableBeanFactory，此时就会创建一个供当前ApplicationContext使用的一个BeanFactory;<br>此定位过程为BeanDifinition的载入创建了I/O条件<br>3.在refreshBeanFactory中，调用了loadBeanDifinitions(beanFactory);<br>getResources();获取资源，此时调用getResourceByPath()方法，此时会将需要的资源new FileSystemResource()；<br>4.注册，是将得到的BeanDifinition向IOC容器中BeanDifinitionMap中，实际上是存在一个hashmap中，遇到相同的bean会抛出异常，为了保证数据的一致性，在注册的过程中其实是加了synchronized锁的，将该方法变为了一个同步方法。   </p><h2 id="IOC容器的依赖注入过程"><a href="#IOC容器的依赖注入过程" class="headerlink" title="IOC容器的依赖注入过程"></a>IOC容器的依赖注入过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">lazy-init:这个属性默认是false，就是在IOC容器的初始化过程中完成。</span><br><span class="line"></span><br><span class="line">lazy-init属性设置为true，就是进行懒加载，在IOC容器中得到getBean时，此时就是依赖注入的起点</span><br><span class="line"></span><br><span class="line">如果向IOC容器索要Bean索取时进行初始化的</span><br><span class="line"></span><br><span class="line">getBean方法执行会去触发 doGetBean方法，此时会去调用createBean方法，此时其实执行的方法是docreateBean方法，此时里面有两个方法createBeanInstance:此方法主要是创建Bean对象，还有一个初始化Bean的方法，initiaizaBean：初始化bean,初始化之前首先会先执行BeanName、BeanClassLoder、BeanFactory注入到bean容器中，执行初始化方法时会执行invokeInitMethod（此时如果配置文件中有init-Method，就会去调用invokeCustomerInitMethod）</span><br><span class="line"></span><br><span class="line">ApplicationContext和Bean的销毁</span><br><span class="line">初始化：prepareBeanFactory()</span><br><span class="line">销毁：doClose(),发出关闭信号，将bean对象销毁，关闭容器本身</span><br><span class="line">````</span><br></pre></td></tr></table></figure><h3 id="Bean的生命周期"><a href="#Bean的生命周期" class="headerlink" title="Bean的生命周期"></a>Bean的生命周期</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1.Bean实例的创建，createBeanInstance</span><br><span class="line">2.在实行initilizaBean（初始化之前）会执行populationBean方法（此方法主要是为创建的bean实例设置属性）</span><br><span class="line">3.调用初始化方法InitilizaBean</span><br><span class="line">4.此时web容器可以通过IOC容器获取Bean并使用</span><br><span class="line">5.容器的销毁及Bean对象的销毁</span><br></pre></td></tr></table></figure><h3 id="几种Bean的作用域"><a href="#几种Bean的作用域" class="headerlink" title="几种Bean的作用域"></a>几种Bean的作用域</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">singleton：单例模式，只能创建一个对象  </span><br><span class="line">prototype:每次都会创建一个新的实例，共会创建多个对象实例  </span><br><span class="line">request：每次http请求中，都会创建一个bean，前提是bena留作一个webXmlAppicationContext  </span><br><span class="line">seesion:一个httpsession会话都会创建一个  </span><br><span class="line">global-seesion:一个全局的session会话  </span><br><span class="line"></span><br><span class="line">@AutoWared注解其实是在popularBean中实现的  </span><br><span class="line"></span><br><span class="line">```</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-IOC和DI&quot;&gt;&lt;a href=&quot;#Spring-IOC和DI&quot; class=&quot;headerlink&quot; title=&quot;Spring IOC和DI&quot;&gt;&lt;/a&gt;Spring IOC和DI&lt;/h1&gt;&lt;p&gt;&lt;code&gt;比如说我的类A要使用B的方法，就需要把B
      
    
    </summary>
    
      <category term="spring" scheme="http://yoursite.com/categories/spring/"/>
    
    
      <category term="springIOC" scheme="http://yoursite.com/tags/springIOC/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码</title>
    <link href="http://yoursite.com/2018/03/07/hashMap%E9%9D%A2%E8%AF%95%E5%BF%85%E7%9F%A5/"/>
    <id>http://yoursite.com/2018/03/07/hashMap面试必知/</id>
    <published>2018-03-06T17:41:32.000Z</published>
    <updated>2018-03-31T05:48:07.013Z</updated>
    
    <content type="html"><![CDATA[<p>hash解决hash冲突的四个方法：<br>1.开放定址法<br>2.拉链法<br>3.再hash法<br>4.建立公共溢出区</p><h3 id="hashMap源码"><a href="#hashMap源码" class="headerlink" title="hashMap源码"></a>hashMap源码</h3><p>线程不安全</p><h4 id="1-hashMap底层结构"><a href="#1-hashMap底层结构" class="headerlink" title="1. hashMap底层结构"></a>1. hashMap底层结构</h4><pre><code>jdk1.8之前采用是位桶+链表的方式，散列链表</code></pre><p>JDK1.8之后采用的是位桶+链表/红黑树的方式，也是非线程安全的。  </p><h4 id="2-他的每个节点其实就是一个Node结点，hash-key值，value值，next值。"><a href="#2-他的每个节点其实就是一个Node结点，hash-key值，value值，next值。" class="headerlink" title="2.他的每个节点其实就是一个Node结点，hash,key值，value值，next值。"></a>2.他的每个节点其实就是一个Node结点，hash,key值，value值，next值。</h4><h4 id="3-hash-方法。"><a href="#3-hash-方法。" class="headerlink" title="3.hash()方法。"></a>3.hash()方法。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static final int hash(Object key) &#123;</span><br><span class="line">    int h;</span><br><span class="line">    return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不无右移16位的话，他的hashcode的范围将是一个4亿大的空间，这样一来<br>导致hash冲突的概率特别低，一个4亿长的数组内存也是存不下的。<br>其实这段代码叫扰动函数，始得均匀分布。增加了低位的随机性。  </p><h4 id="4-indexFor方法"><a href="#4-indexFor方法" class="headerlink" title="4.indexFor方法"></a>4.indexFor方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">static int indexFor(int h, int length) &#123; </span><br><span class="line">    return h &amp; (length-1); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样设计的目的是使得均匀散列，因为hashMap中的扩容无论如何都是以2倍扩容，出始化的容量是16，这样一来length - 1的值就为全1，和一个hash值相于时就取的是其低几位。<br>5.hashMap的扩容<br>当某个桶中的键值对数量大于8个【9个起】，先尝试table数组进行扩容，桶数增加2倍，且桶数量大于等于64，则将底层实现从链表转为红黑树。</p><h4 id="红黑树："><a href="#红黑树：" class="headerlink" title="红黑树："></a>红黑树：</h4><p>概念：<br>1.根节点必须是黑色。<br>2.叶子结点必须是黑色<br>3.每个结点必须是黑色或者红色的一种。<br>4.如果一个结点是红色，那么他的页子结点必须是黑色（null）。<br>5.从任意一个结点到其页子结点的路径上黑色结点的个数的相等的。<br>// 如果桶中的键值对达到该阀值，则检测桶数量<br> int threshold; // 新的扩容resize临界值,当实际大小(容量<em>填充比)大于临界值时，会进行2倍<br> <font color="#0xff0000">扩容</font><br>扩容：hashmap实例里的元素个数大于threshold时执行resize(即桶数量扩容为2倍并散列原来的Entry)。<br>PS：threshold=桶数量</em>负载因子<br>构造方法中提到了两个很重要的参数：初始容量和加载因子。这两个参数是影响HashMap性能的重要参数，<br>    其中容量表示哈希表中槽的数量（即哈希数组的长度），初始容量是创建哈希表时的容量（从构造函数中可以看出，如果不指明，则默认为16），加载因子是哈希表在其容量自动增加之前可以达到多满的一种尺度，当哈希表中的条目数超出了加载因子与当前容量的乘积时，则要对该哈希表进行 resize 操作（即扩容）。<br>下面说下加载因子，<br>如果加载因子越大，对空间的利用更充分，但是查找效率会降低（链表长度会越来越长）；<br>如果加载因子太小，那么表中的数据将过于稀疏（很多空间还没用，就开始扩容了），对空间造成严重浪费。<br>如果我们在构造方法中不指定，则系统默认加载因子为0.75，这是一个比较理想的值，一般情况下我们是无需修改的。<br>另外，无论我们指定的容量为多少，构造方法都会将实际容量设为不小于指定容量的2的次方的一个数，且最大值不能超过2的30次方  </p><h4 id="6-hashMap中getValue方法"><a href="#6-hashMap中getValue方法" class="headerlink" title="6.hashMap中getValue方法"></a>6.hashMap中getValue方法</h4><p>先获取key对用的hash值，然后用hash&amp;length-1相于得到在table数组中的初始位置，在判断key相不相等，然后遍历该链表或者该红黑树。  </p><h4 id="7-hashMap中的put方法"><a href="#7-hashMap中的put方法" class="headerlink" title="7.hashMap中的put方法"></a>7.hashMap中的put方法</h4><p>加入时先判断tab数组是不是为空，为空就按初始化容量，<br>然后在通过n-1&amp;hash求对应的位值，如果此位置为Null,直接新建一个结点插入其中即可，如果不为null就表示有hash冲突，进行处理即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;hash解决hash冲突的四个方法：&lt;br&gt;1.开放定址法&lt;br&gt;2.拉链法&lt;br&gt;3.再hash法&lt;br&gt;4.建立公共溢出区&lt;/p&gt;
&lt;h3 id=&quot;hashMap源码&quot;&gt;&lt;a href=&quot;#hashMap源码&quot; class=&quot;headerlink&quot; title=&quot;has
      
    
    </summary>
    
      <category term="集合" scheme="http://yoursite.com/categories/%E9%9B%86%E5%90%88/"/>
    
    
      <category term="hashmap" scheme="http://yoursite.com/tags/hashmap/"/>
    
  </entry>
  
</feed>
